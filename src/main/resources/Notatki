Przeróbka na serwisy i dodanoe DTOs'ów i dopisanie Mapperów ręcznie
Dodać Flywaya -> ściągnąć klasę FlywayMigrationConfig z EnergyDataViewer
Zrobić testy Controller'a, (do samych Footbalerów na razie) (wszystko co się da)
Dodanie Walidacji ręcznej
Przeróbka Walidacji JSR
Dodanie stronicowania do zwracanych List -> DataPointController metoda GetDataPointByHourAndDeliveryPoints (poczytać o stronicowaniu ze SpringData)
Dodanie kolejnych Encji

Obejrzeć z yt (teams) CommandQueryResponsibilitySegregation
Pakietować funkcjonalnościami (klasa Footballera w jednym miejscu, Meczu w drugiej itp.)

Przejrzeć energy-data-viewer(testy też)
Record poczytać co to jest

(za pomocą MapStruct (konwertery)) -> na razie przepisywać ręcznie/ builder z Lomboka

//TODO W osobnym branchu dodać footballera, który będzie miał encję klub, historię klubu, listę meczy i zobaczyć co zwróci RestController (zwróci wszysko, dlatego potrzebujemy DTO)
//TODO testy najpierw dla repozytoriów

//TODO Przerobić na listę klubów w któych grał, i niech to będzie encja, i od kiedy do kiedy grał w tych klubach (kontrakt encja)
//TODO DTO - Data Transfer Object
// REpository(wypycha Encję) -> Service(wypycha DTO'sa) ->  Controller(wypycha REsponseEntity z DTO'sem
// Controllery do kontraktu i do klubu
// Dołożyć obsługę meczy (mecz drużyny obie, lista zawodników obu drużyn, lista goli(kto strzelił),
// metody na dodawanie meczu w trakcie meczu, informacja czy był walkover w meczu)
// Dodać metody do Footballera kto strzelił najwięcej bramek, najwięcej bramek dla danego zespołu, lista zespołów które strzelił najwięcej bramek

///////////////////////////////////
NOWE ZADANIE
Dodanie testów automatycznych:
    Obecnie nie ma testów automatycznych w aplikacji i testowanie jest możliwe jedynie za pomocą Postmana, nie ma możliwości
sprawdzenia za pomocą Mavena. Chcemy mieć możliwość testowania aplikacji automatycznego.
Testujemy Controller  tak żeby logika w Service też była przetestowana.

    Acceptance criteria:
1.Wszystkie endpoint aplikacji są przetestowane.
2.Przetestowane są ścieżki pozytywne i negatywne.
3.Kod się kompiluje za pomocą mavena, wszystkie testy przechodzą.

bez mocków !
https://www.baeldung.com/integration-testing-in-spring
https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/html/boot-features-testing.html
@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = { ApplicationConfig.class })
@WebAppConfiguration
2 testy przynajmiej

@Autowired -> nauczyć się tłumaczyć jak działa
@BeforeAll @BeforeEach
JsonPath

Testować w mavenie !

Flyway --> usunąć zawartość schematu, zobaczyć co trzyma flywayowa baza danych,
dopisać walidacje czy odpowiedni pesel podany itp,
walidować też metodę put w controllerze (sprawdzać czy request jest poprawny, jeśli nie to rzucać BadRequest)
Dokumentacja Spring Data --> notatki


    //todo prepaere pull request,
    // prepare database extended with club entity
    //flyway migration V2 (with club) --> name, year of creation etc,
    //create a branch from this branch

22.02.23
    make it possible to note in which years which footballer played in which club, how much he earned,
    add matches entity, so we can show: who played , which clubs, which footballers, what was the score,
     where did they play
w pgAdminie zrobić tabelki, tak żeby można było odpytać, porobić joiny, umieścić dane przykładowe, przetestować
Jak będzie działać to przenieść do migracji, zrobić kilka tabelek na raz w jednej migracji


27.02
1. Dodać repozytoria do encji
2. Napisać testy zapisywania na nowych encjach
3. Sprawdzić czy faktycznie są zapisywane w bazie danych

4.Przetestować save, get,


28.02
Napisać więcej testów na wszystkie encje, sprawdzić czy używać CASCADE

Za jednym razem zapisać mecz z reprezentacjami, piłkarzami i golami, piłkarzy
i reprezentację klubów pobrać zew wcześniej zapisanych danych

Następna metoda testowa: mając mecz w bazie danych dopisywać gole do tegoż meczu
DUŻO TESTÓW (z 30 przynajmniej) na wszystkie możliwe sposoby

Repozytoria query pisać w JPQL-u albo derived query ewentualnie
Query w JPQL (nie native) przerobione z postgresa,
Dodać testy do tych nowych Query z repozytoriów

1.03
Przeczytać o LazyInitializationException
Wywołać (napisać kod) LazyInitializationException

Query w JPQL przez kilka tabel z Joinami i przetestować je
✓ Wszystkie kluby które zagrały więcej niż 3 mecze !
✓ Średnia liczba goli zdobyta przez każdego zawodnika na mecz np.Piłkarz1 zdobył 6,5 gola na mecz (i wypisać wszystkich)
- Który piłkarz pojawił się w największej liczbie meczów
- Średnia długość kontraktów piłkarzy w danym zespole

