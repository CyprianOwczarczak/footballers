Przeróbka na serwisy i dodanoe DTOs'ów i dopisanie Mapperów ręcznie
Dodać Flywaya -> ściągnąć klasę FlywayMigrationConfig z EnergyDataViewer
Zrobić testy Controller'a, (do samych Footbalerów na razie) (wszystko co się da)
Dodanie Walidacji ręcznej
Przeróbka Walidacji JSR
Dodanie stronicowania do zwracanych List -> DataPointController metoda GetDataPointByHourAndDeliveryPoints (poczytać o stronicowaniu ze SpringData)
Dodanie kolejnych Encji

Obejrzeć z yt (teams) CommandQueryResponsibilitySegregation
Pakietować funkcjonalnościami (klasa Footballera w jednym miejscu, Meczu w drugiej itp.)

Przejrzeć energy-data-viewer(testy też)
Record poczytać co to jest

(za pomocą MapStruct (konwertery)) -> na razie przepisywać ręcznie/ builder z Lomboka

//TODO W osobnym branchu dodać footballera, który będzie miał encję klub, historię klubu, listę meczy i zobaczyć co zwróci RestController (zwróci wszysko, dlatego potrzebujemy DTO)
//TODO testy najpierw dla repozytoriów

//TODO Przerobić na listę klubów w któych grał, i niech to będzie encja, i od kiedy do kiedy grał w tych klubach (kontrakt encja)
//TODO DTO - Data Transfer Object
// REpository(wypycha Encję) -> Service(wypycha DTO'sa) ->  Controller(wypycha REsponseEntity z DTO'sem
// Controllery do kontraktu i do klubu
// Dołożyć obsługę meczy (mecz drużyny obie, lista zawodników obu drużyn, lista goli(kto strzelił),
// metody na dodawanie meczu w trakcie meczu, informacja czy był walkover w meczu)
// Dodać metody do Footballera kto strzelił najwięcej bramek, najwięcej bramek dla danego zespołu, lista zespołów które strzelił najwięcej bramek

///////////////////////////////////
NOWE ZADANIE
Dodanie testów automatycznych:
    Obecnie nie ma testów automatycznych w aplikacji i testowanie jest możliwe jedynie za pomocą Postmana, nie ma możliwości
sprawdzenia za pomocą Mavena. Chcemy mieć możliwość testowania aplikacji automatycznego.
Testujemy Controller  tak żeby logika w Service też była przetestowana.

    Acceptance criteria:
1.Wszystkie endpoint aplikacji są przetestowane.
2.Przetestowane są ścieżki pozytywne i negatywne.
3.Kod się kompiluje za pomocą mavena, wszystkie testy przechodzą.

bez mocków !
https://www.baeldung.com/integration-testing-in-spring
https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/html/boot-features-testing.html
@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = { ApplicationConfig.class })
@WebAppConfiguration
2 testy przynajmiej

@Autowired -> nauczyć się tłumaczyć jak działa
@BeforeAll @BeforeEach
JsonPath

Testować w mavenie !